/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ResourceLoader } from './imageviewer.model';
var PdfResourceLoader = /** @class */ (function (_super) {
    tslib_1.__extends(PdfResourceLoader, _super);
    function PdfResourceLoader(_imageCache) {
        var _this = _super.call(this) || this;
        _this._imageCache = _imageCache;
        if (typeof window !== 'undefined' && 'Worker' in window) {
            if (pdfjsLib && pdfjsLib.GlobalWorkerOptions && !pdfjsLib.GlobalWorkerOptions.workerSrc) {
                pdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;
            }
        }
        _this.showItemsQuantity = true;
        return _this;
    }
    /**
     * @return {?}
     */
    PdfResourceLoader.prototype.setUp = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ vm = this;
        if (vm.loading || !vm.src) {
            return;
        }
        var /** @type {?} */ loadingTask = pdfjsLib.getDocument(vm.src);
        vm.loading = true;
        vm.currentItem = 1;
        loadingTask.then(function (pdf) {
            vm._pdf = pdf;
            vm.totalItem = pdf.numPages;
            vm.loaded = true;
            vm.loadResource();
        }, function (reason) {
            console.error(reason);
        });
    };
    /**
     * @return {?}
     */
    PdfResourceLoader.prototype.loadResource = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ vm = this;
        if (!vm.loaded) {
            vm._pendingReload = true;
            return;
        }
        vm.loaded = false;
        var /** @type {?} */ url = vm.src;
        var /** @type {?} */ page = vm.currentItem;
        vm._pdf.getPage(page).then(function (pdfPage) {
            vm._page = pdfPage;
            vm.loadImage(url, page, function () {
                vm.loaded = true;
                vm.loading = false;
                if (vm._pendingReload) {
                    vm._pendingReload = false;
                    vm.loadResource();
                }
                else {
                    vm.resourceChange.next();
                }
            });
        });
    };
    /**
     * @param {?} src
     * @param {?} page
     * @param {?} onFinish
     * @return {?}
     */
    PdfResourceLoader.prototype.loadImage = /**
     * @param {?} src
     * @param {?} page
     * @param {?} onFinish
     * @return {?}
     */
    function (src, page, onFinish) {
        var /** @type {?} */ vm = this;
        var /** @type {?} */ cacheimg = vm._imageCache.getImage(src, page);
        if (cacheimg) {
            vm._image = cacheimg;
            onFinish();
            return;
        }
        var /** @type {?} */ canvas = document.createElement('canvas');
        var /** @type {?} */ context = canvas.getContext('2d');
        var /** @type {?} */ pageVp = vm._page.getViewport(2);
        canvas.width = pageVp.width;
        canvas.height = pageVp.height;
        var /** @type {?} */ renderContext = {
            canvasContext: context,
            viewport: pageVp
        };
        var /** @type {?} */ renderTask = vm._page.render(renderContext);
        renderTask.then(function () {
            canvas.toBlob(function (blob) {
                var /** @type {?} */ img = new Image();
                img.onload = onFinish;
                img.src = URL.createObjectURL(blob);
                vm._imageCache.saveImage(src, page, img);
                vm._image = img;
            });
        });
    };
    return PdfResourceLoader;
}(ResourceLoader));
export { PdfResourceLoader };
function PdfResourceLoader_tsickle_Closure_declarations() {
    /** @type {?} */
    PdfResourceLoader.prototype._pdf;
    /** @type {?} */
    PdfResourceLoader.prototype._page;
    /** @type {?} */
    PdfResourceLoader.prototype._pendingReload;
    /** @type {?} */
    PdfResourceLoader.prototype._imageCache;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGRmLmxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BoYWxseXNvbmgvbmd4LWltYWdldmlld2VyLyIsInNvdXJjZXMiOlsibGliL3BkZi5sb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUE0QixNQUFNLHFCQUFxQixDQUFDO0FBUS9FLElBQUE7SUFBdUMsNkNBQWM7SUFLbkQsMkJBQW9CLFdBQThCO1FBQWxELFlBQ0UsaUJBQU8sU0FPUjtRQVJtQixpQkFBVyxHQUFYLFdBQVcsQ0FBbUI7UUFFaEQsRUFBRSxDQUFDLENBQUMsT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLFFBQVEsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3hELEVBQUUsQ0FBQyxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsbUJBQW1CLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDeEYsUUFBUSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUM7YUFDdEQ7U0FDRjtRQUNELEtBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7O0tBQy9COzs7O0lBRUQsaUNBQUs7OztJQUFMO1FBQ0UscUJBQU0sRUFBRSxHQUFHLElBQUksQ0FBQztRQUNoQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFBQyxNQUFNLENBQUM7U0FBRTtRQUN0QyxxQkFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakQsRUFBRSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDbEIsRUFBRSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDbkIsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFDLEdBQXFCO1lBQ3JDLEVBQUUsQ0FBQyxJ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RyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNwQyxFQUFFLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUN6QyxFQUFFLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQzthQUNqQixDQUFDLENBQUM7U0FDSixDQUFDLENBQUM7OzRCQTdGUDtFQVF1QyxjQUFjLEVBdUZwRCxDQUFBO0FBdkZELDZCQXVGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc291cmNlTG9hZGVyLCBEaW1lbnNpb24sIHRvU3F1YXJlQW5nbGUgfSBmcm9tICcuL2ltYWdldmlld2VyLm1vZGVsJztcclxuaW1wb3J0IHsgSW1hZ2VDYWNoZVNlcnZpY2UgfSBmcm9tICcuL2ltYWdlY2FjaGUuc2VydmljZSc7XHJcbmltcG9ydCB7IEltYWdlVmlld2VyQ29uZmlnIH0gZnJvbSAnLi9pbWFnZXZpZXdlci5jb25maWcnO1xyXG5pbXBvcnQgeyBQREZKU1N0YXRpYywgUERGRG9jdW1lbnRQcm94eSwgUERGUGFnZVByb3h5IH0gZnJvbSAncGRmanMtZGlzdCc7XHJcblxyXG5kZWNsYXJlIHZhciBwZGZqc0xpYjogYW55O1xyXG5kZWNsYXJlIHZhciBwZGZqc1dvcmtlcjogYW55O1xyXG5cclxuZXhwb3J0IGNsYXNzIFBkZlJlc291cmNlTG9hZGVyIGV4dGVuZHMgUmVzb3VyY2VMb2FkZXIge1xyXG4gIHByaXZhdGUgX3BkZjogUERGRG9jdW1lbnRQcm94eTtcclxuICBwcml2YXRlIF9wYWdlOiBQREZQYWdlUHJveHk7XHJcbiAgcHJpdmF0ZSBfcGVuZGluZ1JlbG9hZDogYm9vbGVhbjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfaW1hZ2VDYWNoZTogSW1hZ2VDYWNoZVNlcnZpY2UpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ1dvcmtlcicgaW4gd2luZG93KSB7XHJcbiAgICAgIGlmIChwZGZqc0xpYiAmJiBwZGZqc0xpYi5HbG9iYWxXb3JrZXJPcHRpb25zICYmICFwZGZqc0xpYi5HbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclNyYykge1xyXG4gICAgICAgIHBkZmpzTGliLkdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyU3JjID0gcGRmanNXb3JrZXI7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuc2hvd0l0ZW1zUXVhbnRpdHkgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgc2V0VXAoKSB7XHJcbiAgICBjb25zdCB2bSA9IHRoaXM7XHJcbiAgICBpZiAodm0ubG9hZGluZyB8fCAhdm0uc3JjKSB7IHJldHVybjsgfVxyXG4gICAgY29uc3QgbG9hZGluZ1Rhc2sgPSBwZGZqc0xpYi5nZXREb2N1bWVudCh2bS5zcmMpO1xyXG4gICAgdm0ubG9hZGluZyA9IHRydWU7XHJcbiAgICB2bS5jdXJyZW50SXRlbSA9IDE7XHJcbiAgICBsb2FkaW5nVGFzay50aGVuKChwZGY6IFBERkRvY3VtZW50UHJveHkpID0+IHtcclxuICAgICAgdm0uX3BkZiA9IHBkZjtcclxuICAgICAgdm0udG90YWxJdGVtID0gcGRmLm51bVBhZ2VzO1xyXG4gICAgICB2bS5sb2FkZWQgPSB0cnVlO1xyXG4gICAgICB2bS5sb2FkUmVzb3VyY2UoKTtcclxuICAgIH0sIChyZWFzb246IHN0cmluZykgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKHJlYXNvbik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGxvYWRSZXNvdXJjZSgpIHtcclxuICAgIGNvbnN0IHZtID0gdGhpcztcclxuICAgIGlmICghdm0ubG9hZGVkKSB7XHJcbiAgICAgIHZtLl9wZW5kaW5nUmVsb2FkID0gdHJ1ZTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdm0ubG9hZGVkID0gZmFsc2U7XHJcbiAgICBjb25zdCB1cmwgPSB2bS5zcmM7XHJcbiAgICBjb25zdCBwYWdlID0gdm0uY3VycmVudEl0ZW07XHJcblxyXG4gICAgdm0uX3BkZi5nZXRQYWdlKHBhZ2UpLnRoZW4oKHBkZlBhZ2UpID0+IHtcclxuICAgICAgdm0uX3BhZ2UgPSBwZGZQYWdlO1xyXG4gICAgICB2bS5sb2FkSW1hZ2UodXJsLCBwYWdlLCAoKSA9PiB7XHJcbiAgICAgICAgdm0ubG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB2bS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHZtLl9wZW5kaW5nUmVsb2FkKSB7XHJcbiAgICAgICAgICB2bS5fcGVuZGluZ1JlbG9hZCA9IGZhbHNlO1xyXG4gICAgICAgICAgdm0ubG9hZFJlc291cmNlKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHZtLnJlc291cmNlQ2hhbmdlLm5leHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGxvYWRJbWFnZShzcmM6IHN0cmluZywgcGFnZTogbnVtYmVyLCBvbkZpbmlzaDogKCkgPT4gdm9pZCkge1xyXG4gICAgY29uc3Qgdm0gPSB0aGlzO1xyXG4gICAgY29uc3QgY2FjaGVpbWcgPSB2bS5faW1hZ2VDYWNoZS5nZXRJbWFnZShzcmMsIHBhZ2UpO1xyXG4gICAgaWYgKGNhY2hlaW1nKSB7XHJcbiAgICAgIHZtLl9pbWFnZSA9IGNhY2hlaW1nO1xyXG4gICAgICBvbkZpbmlzaCgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgY29uc3QgcGFnZVZwID0gdm0uX3BhZ2UuZ2V0Vmlld3BvcnQoMik7XHJcblxyXG4gICAgY2FudmFzLndpZHRoID0gcGFnZVZwLndpZHRoO1xyXG4gICAgY2FudmFzLmhlaWdodCA9IHBhZ2VWcC5oZWlnaHQ7XHJcblxyXG4gICAgY29uc3QgcmVuZGVyQ29udGV4dCA9IHtcclxuICAgICAgY2FudmFzQ29udGV4dDogY29udGV4dCxcclxuICAgICAgdmlld3BvcnQ6IHBhZ2VWcFxyXG4gICAgfTtcclxuICAgIGNvbnN0IHJlbmRlclRhc2sgPSB2bS5fcGFnZS5yZW5kZXIocmVuZGVyQ29udGV4dCk7XHJcbiAgICByZW5kZXJUYXNrLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICBjYW52YXMudG9CbG9iKGJsb2IgPT4ge1xyXG4gICAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIGltZy5vbmxvYWQgPSBvbkZpbmlzaDtcclxuICAgICAgICBpbWcuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuICAgICAgICB2bS5faW1hZ2VDYWNoZS5zYXZlSW1hZ2Uoc3JjLCBwYWdlLCBpbWcpO1xyXG4gICAgICAgIHZtLl9pbWFnZSA9IGltZztcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19