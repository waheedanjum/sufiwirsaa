/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Subject } from 'rxjs';
var Button = /** @class */ (function () {
    //#endregion
    //#region Lifecycle events
    function Button(config, style) {
        this.style = style;
        //#region Properties
        this.sortId = 0;
        // hover state
        this.hover = false;
        // show/hide button
        this.display = true;
        this.drawPosition = null;
        this.drawRadius = 0;
        this.sortId = config.sortId;
        this.display = config.show;
        this.icon = config.icon;
        this.tooltip = config.tooltip;
    }
    //#endregion
    //#region Events
    // click action
    /**
     * @param {?} evt
     * @return {?}
     */
    Button.prototype.onClick = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) { alert('no click action set!'); return true; };
    // mouse down action
    /**
     * @param {?} evt
     * @return {?}
     */
    Button.prototype.onMouseDown = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) { return false; };
    //#endregion
    //#region Draw Button
    /**
     * @param {?} ctx
     * @param {?} x
     * @param {?} y
     * @param {?} radius
     * @return {?}
     */
    Button.prototype.draw = /**
     * @param {?} ctx
     * @param {?} x
     * @param {?} y
     * @param {?} radius
     * @return {?}
     */
    function (ctx, x, y, radius) {
        this.drawPosition = { x: x, y: y };
        this.drawRadius = radius;
        // preserve context
        ctx.save();
        // drawing settings
        var /** @type {?} */ isHover = (typeof this.hover === 'function') ? this.hover() : this.hover;
        ctx.globalAlpha = (isHover) ? this.style.hoverAlpha : this.style.alpha;
        ctx.fillStyle = this.style.bgStyle;
        ctx.lineWidth = 0;
        // draw circle
        ctx.beginPath();
        ctx.arc(x, y, radius, 0, 2 * Math.PI);
        ctx.closePath();
        ctx.fill();
        if (this.style.borderWidth > 0) {
            ctx.lineWidth = this.style.borderWidth;
            ctx.strokeStyle = this.style.borderStyle;
            ctx.stroke();
        }
        // draw icon
        if (this.icon !== null) {
            ctx.save();
            // ctx.globalCompositeOperation = 'destination-out';
            this.drawIconFont(ctx, x, y, radius);
            ctx.restore();
        }
        // restore context
        ctx.restore();
    };
    /**
     * @param {?} ctx
     * @param {?} centreX
     * @param {?} centreY
     * @param {?} size
     * @return {?}
     */
    Button.prototype.drawIconFont = /**
     * @param {?} ctx
     * @param {?} centreX
     * @param {?} centreY
     * @param {?} size
     * @return {?}
     */
    function (ctx, centreX, centreY, size) {
        // font settings
        ctx.font = size + 'px ' + this.style.iconFontFamily;
        ctx.fillStyle = this.style.iconStyle;
        // calculate position
        var /** @type {?} */ textSize = ctx.measureText(this.icon);
        var /** @type {?} */ x = centreX - textSize.width / 2;
        var /** @type {?} */ y = centreY + size / 2;
        // draw it
        ctx.fillText(this.icon, x, y);
    };
    //#endregion
    //#region Utils
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    Button.prototype.isWithinBounds = /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    function (x, y) {
        if (this.drawPosition === null) {
            return false;
        }
        var /** @type {?} */ dx = Math.abs(this.drawPosition.x - x), /** @type {?} */ dy = Math.abs(this.drawPosition.y - y);
        return dx * dx + dy * dy <= this.drawRadius * this.drawRadius;
    };
    return Button;
}());
export { Button };
function Button_tsickle_Closure_declarations() {
    /** @type {?} */
    Button.prototype.sortId;
    /** @type {?} */
    Button.prototype.icon;
    /** @type {?} */
    Button.prototype.tooltip;
    /** @type {?} */
    Button.prototype.hover;
    /** @type {?} */
    Button.prototype.display;
    /** @type {?} */
    Button.prototype.drawPosition;
    /** @type {?} */
    Button.prototype.drawRadius;
    /** @type {?} */
    Button.prototype.style;
}
var Viewport = /** @class */ (function () {
    function Viewport(width, height, scale, rotation, x, y) {
        this.width = width;
        this.height = height;
        this.scale = scale;
        this.rotation = rotation;
        this.x = x;
        this.y = y;
    }
    return Viewport;
}());
export { Viewport };
function Viewport_tsickle_Closure_declarations() {
    /** @type {?} */
    Viewport.prototype.width;
    /** @type {?} */
    Viewport.prototype.height;
    /** @type {?} */
    Viewport.prototype.scale;
    /** @type {?} */
    Viewport.prototype.rotation;
    /** @type {?} */
    Viewport.prototype.x;
    /** @type {?} */
    Viewport.prototype.y;
}
/**
 * @record
 */
export function Dimension() { }
function Dimension_tsickle_Closure_declarations() {
    /** @type {?} */
    Dimension.prototype.width;
    /** @type {?} */
    Dimension.prototype.height;
}
/**
 * @abstract
 */
var /**
 * @abstract
 */
ResourceLoader = /** @class */ (function () {
    function ResourceLoader() {
        this.viewport = { width: 0, height: 0, scale: 1, rotation: 0, x: 0, y: 0 };
        this.minScale = 0;
        this.maxScale = 4;
        this.currentItem = 1;
        this.totalItem = 1;
        this.showItemsQuantity = false;
        this.loaded = false;
        this.loading = false;
        this.rendering = false;
        this.resourceChange = new Subject();
    }
    /**
     * @param {?} canvasDim
     * @return {?}
     */
    ResourceLoader.prototype.resetViewport = /**
     * @param {?} canvasDim
     * @return {?}
     */
    function (canvasDim) {
        if (!this.loaded || !canvasDim) {
            return;
        }
        var /** @type {?} */ rotation = this.viewport ? this.viewport.rotation : 0;
        var /** @type {?} */ inverted = toSquareAngle(rotation) / 90 % 2 !== 0;
        var /** @type {?} */ canvas = {
            width: !inverted ? canvasDim.width : canvasDim.height,
            height: !inverted ? canvasDim.height : canvasDim.width
        };
        if (((canvas.height / this._image.height) * this._image.width) <= canvas.width) {
            this.viewport.scale = canvas.height / this._image.height;
        }
        else {
            this.viewport.scale = canvas.width / this._image.width;
        }
        this.minScale = this.viewport.scale / 4;
        this.maxScale = this.viewport.scale * 4;
        // start point to draw image
        this.viewport.width = this._image.width * this.viewport.scale;
        this.viewport.height = this._image.height * this.viewport.scale;
        this.viewport.x = (canvasDim.width - this.viewport.width) / 2;
        this.viewport.y = (canvasDim.height - this.viewport.height) / 2;
    };
    /**
     * @param {?} ctx
     * @param {?} config
     * @param {?} canvasDim
     * @param {?} onFinish
     * @return {?}
     */
    ResourceLoader.prototype.draw = /**
     * @param {?} ctx
     * @param {?} config
     * @param {?} canvasDim
     * @param {?} onFinish
     * @return {?}
     */
    function (ctx, config, canvasDim, onFinish) {
        // clear canvas
        ctx.clearRect(0, 0, canvasDim.width, canvasDim.height);
        // Draw background color;
        ctx.fillStyle = config.bgStyle;
        ctx.fillRect(0, 0, canvasDim.width, canvasDim.height);
        // draw image (transformed, rotate and scaled)
        if (!this.loading && this.loaded) {
            ctx.translate(this.viewport.x + this.viewport.width / 2, this.viewport.y + this.viewport.height / 2);
            ctx.rotate(this.viewport.rotation * Math.PI / 180);
            ctx.scale(this.viewport.scale, this.viewport.scale);
            ctx.drawImage(this._image, -this._image.width / 2, -this._image.height / 2);
        }
        else {
            ctx.fillStyle = '#333';
            ctx.font = '25px Verdana';
            ctx.textAlign = 'center';
            ctx.fillText(config.loadingMessage || 'Loading...', canvasDim.width / 2, canvasDim.height / 2);
        }
        onFinish(ctx, config, canvasDim);
    };
    /**
     * @return {?}
     */
    ResourceLoader.prototype.onResourceChange = /**
     * @return {?}
     */
    function () { return this.resourceChange.asObservable(); };
    return ResourceLoader;
}());
/**
 * @abstract
 */
export { ResourceLoader };
function ResourceLoader_tsickle_Closure_declarations() {
    /** @type {?} */
    ResourceLoader.prototype.src;
    /** @type {?} */
    ResourceLoader.prototype.sourceDim;
    /** @type {?} */
    ResourceLoader.prototype.viewport;
    /** @type {?} */
    ResourceLoader.prototype.minScale;
    /** @type {?} */
    ResourceLoader.prototype.maxScale;
    /** @type {?} */
    ResourceLoader.prototype.currentItem;
    /** @type {?} */
    ResourceLoader.prototype.totalItem;
    /** @type {?} */
    ResourceLoader.prototype.showItemsQuantity;
    /** @type {?} */
    ResourceLoader.prototype.loaded;
    /** @type {?} */
    ResourceLoader.prototype.loading;
    /** @type {?} */
    ResourceLoader.prototype.rendering;
    /** @type {?} */
    ResourceLoader.prototype._image;
    /** @type {?} */
    ResourceLoader.prototype.resourceChange;
    /**
     * @abstract
     * @return {?}
     */
    ResourceLoader.prototype.setUp = function () { };
    /**
     * @abstract
     * @return {?}
     */
    ResourceLoader.prototype.loadResource = function () { };
}
/**
 * @param {?} angle
 * @return {?}
 */
export function toSquareAngle(angle) {
    return 90 * ((Math.trunc(angle / 90) + (Math.trunc(angle % 90) > 45 ? 1 : 0)) % 4);
}

//# sourceMappingURL=data:application/json;base64,