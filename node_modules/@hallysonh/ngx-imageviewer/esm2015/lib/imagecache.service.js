/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @record
 */
export function CacheDef() { }
function CacheDef_tsickle_Closure_declarations() {
    /** @type {?} */
    CacheDef.prototype.url;
    /** @type {?} */
    CacheDef.prototype.page;
    /** @type {?} */
    CacheDef.prototype.image;
}
export class ImageCacheService {
    constructor() {
        this._cache = [];
    }
    /**
     * @return {?}
     */
    get cache() {
        return this._cache;
    }
    /**
     * @param {?} url
     * @param {?} page
     * @return {?}
     */
    getCache(url, page) {
        return this.cache.find(i => i.url === url && i.page === page);
    }
    /**
     * @param {?} url
     * @param {?} page
     * @return {?}
     */
    getImage(url, page) {
        const /** @type {?} */ c = this.getCache(url, page);
        return c ? c.image : null;
    }
    /**
     * @param {?} url
     * @param {?} page
     * @param {?} image
     * @return {?}
     */
    saveImage(url, page, image) {
        const /** @type {?} */ cache = this.getCache(url, page);
        if (cache) {
            cache.image = image;
        }
        else {
            this.cache.push({ url, page, image });
        }
    }
    /**
     * @return {?}
     */
    disposeCache() {
        this.cache.forEach(i => URL.revokeObjectURL(i.image.src));
        this._cache = [];
    }
}
ImageCacheService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
/** @nocollapse */
ImageCacheService.ctorParameters = () => [];
/** @nocollapse */ ImageCacheService.ngInjectableDef = i0.defineInjectable({ factory: function ImageCacheService_Factory() { return new ImageCacheService(); }, token: ImageCacheService, providedIn: "root" });
function ImageCacheService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    ImageCacheService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    ImageCacheService.ctorParameters;
    /** @type {?} */
    ImageCacheService.prototype._cache;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VjYWNoZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGhhbGx5c29uaC9uZ3gtaW1hZ2V2aWV3ZXIvIiwic291cmNlcyI6WyJsaWIvaW1hZ2VjYWNoZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7Ozs7Ozs7OztBQVMzQyxNQUFNO0lBSUo7c0JBRjZCLEVBQUU7S0FFZjs7OztJQUVoQixJQUFJLEtBQUs7UUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztLQUNwQjs7Ozs7O0lBRUQsUUFBUSxDQUFDLEdBQVcsRUFBRSxJQUFZO1FBQ2hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUM7S0FDL0Q7Ozs7OztJQUVELFFBQVEsQ0FBQyxHQUFXLEVBQUUsSUFBWTtRQUNoQyx1QkFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0tBQzNCOzs7Ozs7O0lBRUQsU0FBUyxDQUFDLEdBQVcsRUFBRSxJQUFZLEVBQUUsS0FBVTtRQUM3Qyx1QkFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNWLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1NBQ3JCO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUN2QztLQUNGOzs7O0lBRUQsWUFBWTtRQUNWLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7S0FDbEI7OztZQWhDRixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDYWNoZURlZiB7XHJcbiAgdXJsOiBzdHJpbmc7XHJcbiAgcGFnZTogbnVtYmVyO1xyXG4gIGltYWdlOiBhbnk7XHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXHJcbmV4cG9ydCBjbGFzcyBJbWFnZUNhY2hlU2VydmljZSB7XHJcblxyXG4gIHByaXZhdGUgX2NhY2hlOiBDYWNoZURlZltdID0gW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge31cclxuXHJcbiAgZ2V0IGNhY2hlKCk6IENhY2hlRGVmW10ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2NhY2hlO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q2FjaGUodXJsOiBzdHJpbmcsIHBhZ2U6IG51bWJlcikge1xyXG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuZmluZChpID0+IGkudXJsID09PSB1cmwgJiYgaS5wYWdlID09PSBwYWdlKTtcclxuICB9XHJcblxyXG4gIGdldEltYWdlKHVybDogc3RyaW5nLCBwYWdlOiBudW1iZXIpIHtcclxuICAgIGNvbnN0IGMgPSB0aGlzLmdldENhY2hlKHVybCwgcGFnZSk7XHJcbiAgICByZXR1cm4gYyA/IGMuaW1hZ2UgOiBudWxsO1xyXG4gIH1cclxuXHJcbiAgc2F2ZUltYWdlKHVybDogc3RyaW5nLCBwYWdlOiBudW1iZXIsIGltYWdlOiBhbnkpIHtcclxuICAgIGNvbnN0IGNhY2hlID0gdGhpcy5nZXRDYWNoZSh1cmwsIHBhZ2UpO1xyXG4gICAgaWYgKGNhY2hlKSB7XHJcbiAgICAgIGNhY2hlLmltYWdlID0gaW1hZ2U7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNhY2hlLnB1c2goeyB1cmwsIHBhZ2UsIGltYWdlIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGlzcG9zZUNhY2hlKCkge1xyXG4gICAgdGhpcy5jYWNoZS5mb3JFYWNoKGkgPT4gVVJMLnJldm9rZU9iamVjdFVSTChpLmltYWdlLnNyYykpO1xyXG4gICAgdGhpcy5fY2FjaGUgPSBbXTtcclxuICB9XHJcbn1cclxuIl19