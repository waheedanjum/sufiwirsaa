/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Subject } from 'rxjs';
export class Button {
    /**
     * @param {?} config
     * @param {?} style
     */
    constructor(config, style) {
        this.style = style;
        //#region Properties
        this.sortId = 0;
        // hover state
        this.hover = false;
        // show/hide button
        this.display = true;
        this.drawPosition = null;
        this.drawRadius = 0;
        this.sortId = config.sortId;
        this.display = config.show;
        this.icon = config.icon;
        this.tooltip = config.tooltip;
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onClick(evt) { alert('no click action set!'); return true; }
    /**
     * @param {?} evt
     * @return {?}
     */
    onMouseDown(evt) { return false; }
    /**
     * @param {?} ctx
     * @param {?} x
     * @param {?} y
     * @param {?} radius
     * @return {?}
     */
    draw(ctx, x, y, radius) {
        this.drawPosition = { x: x, y: y };
        this.drawRadius = radius;
        // preserve context
        ctx.save();
        // drawing settings
        const /** @type {?} */ isHover = (typeof this.hover === 'function') ? this.hover() : this.hover;
        ctx.globalAlpha = (isHover) ? this.style.hoverAlpha : this.style.alpha;
        ctx.fillStyle = this.style.bgStyle;
        ctx.lineWidth = 0;
        // draw circle
        ctx.beginPath();
        ctx.arc(x, y, radius, 0, 2 * Math.PI);
        ctx.closePath();
        ctx.fill();
        if (this.style.borderWidth > 0) {
            ctx.lineWidth = this.style.borderWidth;
            ctx.strokeStyle = this.style.borderStyle;
            ctx.stroke();
        }
        // draw icon
        if (this.icon !== null) {
            ctx.save();
            // ctx.globalCompositeOperation = 'destination-out';
            this.drawIconFont(ctx, x, y, radius);
            ctx.restore();
        }
        // restore context
        ctx.restore();
    }
    /**
     * @param {?} ctx
     * @param {?} centreX
     * @param {?} centreY
     * @param {?} size
     * @return {?}
     */
    drawIconFont(ctx, centreX, centreY, size) {
        // font settings
        ctx.font = size + 'px ' + this.style.iconFontFamily;
        ctx.fillStyle = this.style.iconStyle;
        // calculate position
        const /** @type {?} */ textSize = ctx.measureText(this.icon);
        const /** @type {?} */ x = centreX - textSize.width / 2;
        const /** @type {?} */ y = centreY + size / 2;
        // draw it
        ctx.fillText(this.icon, x, y);
    }
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    isWithinBounds(x, y) {
        if (this.drawPosition === null) {
            return false;
        }
        const /** @type {?} */ dx = Math.abs(this.drawPosition.x - x), /** @type {?} */ dy = Math.abs(this.drawPosition.y - y);
        return dx * dx + dy * dy <= this.drawRadius * this.drawRadius;
    }
}
function Button_tsickle_Closure_declarations() {
    /** @type {?} */
    Button.prototype.sortId;
    /** @type {?} */
    Button.prototype.icon;
    /** @type {?} */
    Button.prototype.tooltip;
    /** @type {?} */
    Button.prototype.hover;
    /** @type {?} */
    Button.prototype.display;
    /** @type {?} */
    Button.prototype.drawPosition;
    /** @type {?} */
    Button.prototype.drawRadius;
    /** @type {?} */
    Button.prototype.style;
}
export class Viewport {
    /**
     * @param {?} width
     * @param {?} height
     * @param {?} scale
     * @param {?} rotation
     * @param {?} x
     * @param {?} y
     */
    constructor(width, height, scale, rotation, x, y) {
        this.width = width;
        this.height = height;
        this.scale = scale;
        this.rotation = rotation;
        this.x = x;
        this.y = y;
    }
}
function Viewport_tsickle_Closure_declarations() {
    /** @type {?} */
    Viewport.prototype.width;
    /** @type {?} */
    Viewport.prototype.height;
    /** @type {?} */
    Viewport.prototype.scale;
    /** @type {?} */
    Viewport.prototype.rotation;
    /** @type {?} */
    Viewport.prototype.x;
    /** @type {?} */
    Viewport.prototype.y;
}
/**
 * @record
 */
export function Dimension() { }
function Dimension_tsickle_Closure_declarations() {
    /** @type {?} */
    Dimension.prototype.width;
    /** @type {?} */
    Dimension.prototype.height;
}
/**
 * @abstract
 */
export class ResourceLoader {
    constructor() {
        this.viewport = { width: 0, height: 0, scale: 1, rotation: 0, x: 0, y: 0 };
        this.minScale = 0;
        this.maxScale = 4;
        this.currentItem = 1;
        this.totalItem = 1;
        this.showItemsQuantity = false;
        this.loaded = false;
        this.loading = false;
        this.rendering = false;
        this.resourceChange = new Subject();
    }
    /**
     * @param {?} canvasDim
     * @return {?}
     */
    resetViewport(canvasDim) {
        if (!this.loaded || !canvasDim) {
            return;
        }
        const /** @type {?} */ rotation = this.viewport ? this.viewport.rotation : 0;
        const /** @type {?} */ inverted = toSquareAngle(rotation) / 90 % 2 !== 0;
        const /** @type {?} */ canvas = {
            width: !inverted ? canvasDim.width : canvasDim.height,
            height: !inverted ? canvasDim.height : canvasDim.width
        };
        if (((canvas.height / this._image.height) * this._image.width) <= canvas.width) {
            this.viewport.scale = canvas.height / this._image.height;
        }
        else {
            this.viewport.scale = canvas.width / this._image.width;
        }
        this.minScale = this.viewport.scale / 4;
        this.maxScale = this.viewport.scale * 4;
        // start point to draw image
        this.viewport.width = this._image.width * this.viewport.scale;
        this.viewport.height = this._image.height * this.viewport.scale;
        this.viewport.x = (canvasDim.width - this.viewport.width) / 2;
        this.viewport.y = (canvasDim.height - this.viewport.height) / 2;
    }
    /**
     * @param {?} ctx
     * @param {?} config
     * @param {?} canvasDim
     * @param {?} onFinish
     * @return {?}
     */
    draw(ctx, config, canvasDim, onFinish) {
        // clear canvas
        ctx.clearRect(0, 0, canvasDim.width, canvasDim.height);
        // Draw background color;
        ctx.fillStyle = config.bgStyle;
        ctx.fillRect(0, 0, canvasDim.width, canvasDim.height);
        // draw image (transformed, rotate and scaled)
        if (!this.loading && this.loaded) {
            ctx.translate(this.viewport.x + this.viewport.width / 2, this.viewport.y + this.viewport.height / 2);
            ctx.rotate(this.viewport.rotation * Math.PI / 180);
            ctx.scale(this.viewport.scale, this.viewport.scale);
            ctx.drawImage(this._image, -this._image.width / 2, -this._image.height / 2);
        }
        else {
            ctx.fillStyle = '#333';
            ctx.font = '25px Verdana';
            ctx.textAlign = 'center';
            ctx.fillText(config.loadingMessage || 'Loading...', canvasDim.width / 2, canvasDim.height / 2);
        }
        onFinish(ctx, config, canvasDim);
    }
    /**
     * @return {?}
     */
    onResourceChange() { return this.resourceChange.asObservable(); }
}
function ResourceLoader_tsickle_Closure_declarations() {
    /** @type {?} */
    ResourceLoader.prototype.src;
    /** @type {?} */
    ResourceLoader.prototype.sourceDim;
    /** @type {?} */
    ResourceLoader.prototype.viewport;
    /** @type {?} */
    ResourceLoader.prototype.minScale;
    /** @type {?} */
    ResourceLoader.prototype.maxScale;
    /** @type {?} */
    ResourceLoader.prototype.currentItem;
    /** @type {?} */
    ResourceLoader.prototype.totalItem;
    /** @type {?} */
    ResourceLoader.prototype.showItemsQuantity;
    /** @type {?} */
    ResourceLoader.prototype.loaded;
    /** @type {?} */
    ResourceLoader.prototype.loading;
    /** @type {?} */
    ResourceLoader.prototype.rendering;
    /** @type {?} */
    ResourceLoader.prototype._image;
    /** @type {?} */
    ResourceLoader.prototype.resourceChange;
    /**
     * @abstract
     * @return {?}
     */
    ResourceLoader.prototype.setUp = function () { };
    /**
     * @abstract
     * @return {?}
     */
    ResourceLoader.prototype.loadResource = function () { };
}
/**
 * @param {?} angle
 * @return {?}
 */
export function toSquareAngle(angle) {
    return 90 * ((Math.trunc(angle / 90) + (Math.trunc(angle % 90) > 45 ? 1 : 0)) % 4);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2V2aWV3ZXIubW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaGFsbHlzb25oL25neC1pbWFnZXZpZXdlci8iLCJzb3VyY2VzIjpbImxpYi9pbWFnZXZpZXdlci5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUzQyxNQUFNOzs7OztJQW1CSixZQUNFLE1BQW9CLEVBQ1o7UUFBQSxVQUFLLEdBQUwsS0FBSzs7c0JBbkJOLENBQUM7O3FCQU15QixLQUFLOzt1QkFHOUIsSUFBSTs0QkFHUyxJQUFJOzBCQUNOLENBQUM7UUFRcEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzVCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztRQUMzQixJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0tBQy9COzs7OztJQUtELE9BQU8sQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7Ozs7O0lBRzVELFdBQVcsQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFOzs7Ozs7OztJQUlsQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTTtRQUNwQixJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDbkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7O1FBR3pCLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7UUFHWCx1QkFBTSxPQUFPLEdBQUcsQ0FBQyxPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUMvRSxHQUFHLENBQUMsV0FBVyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUN2RSxHQUFHLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQ25DLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDOztRQUdsQixHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDaEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN0QyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDaEIsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ1gsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQixHQUFHLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDO1lBQ3ZDLEdBQUcsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUM7WUFDekMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ2Q7O1FBR0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7WUFFWCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3JDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNmOztRQUdELEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUNmOzs7Ozs7OztJQUVPLFlBQVksQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJOztRQUU5QyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUM7UUFDcEQsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQzs7UUFHckMsdUJBQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVDLHVCQUFNLENBQUMsR0FBRyxPQUFPLEdBQUcsUUFBUSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDdkMsdUJBQU0sQ0FBQyxHQUFHLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDOztRQUc3QixHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOzs7Ozs7O0lBS2hDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNqQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7WUFBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQUU7UUFDakQsdUJBQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLG1CQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JGLE1BQU0sQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0tBQy9EO0NBRUY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFRCxNQUFNOzs7Ozs7Ozs7SUFDSixZQUNTLE9BQ0EsUUFDQSxPQUNBLFVBQ0EsR0FDQTtRQUxBLFVBQUssR0FBTCxLQUFLO1FBQ0wsV0FBTSxHQUFOLE1BQU07UUFDTixVQUFLLEdBQUwsS0FBSztRQUNMLGFBQVEsR0FBUixRQUFRO1FBQ1IsTUFBQyxHQUFELENBQUM7UUFDRCxNQUFDLEdBQUQsQ0FBQztLQUNOO0NBQ0w7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJRCxNQUFNOzt3QkFHd0IsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTt3QkFDcEUsQ0FBQzt3QkFDRCxDQUFDOzJCQUNFLENBQUM7eUJBQ0gsQ0FBQztpQ0FDTyxLQUFLO3NCQUNoQixLQUFLO3VCQUNKLEtBQUs7eUJBQ0gsS0FBSzs4QkFHRyxJQUFJLE9BQU8sRUFBVTs7Ozs7O0lBS3pDLGFBQWEsQ0FBQyxTQUFvQjtRQUN2QyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQUMsTUFBTSxDQUFDO1NBQUU7UUFFM0MsdUJBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUQsdUJBQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4RCx1QkFBTSxNQUFNLEdBQUc7WUFDYixLQUFLLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNO1lBQ3JELE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUs7U0FDdkQsQ0FBQztRQUVGLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUMvRSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1NBQzFEO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQ3hEO1FBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7O1FBR3hDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1FBQzlELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5RCxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Ozs7Ozs7OztJQUczRCxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQXlCLEVBQUUsU0FBb0IsRUFBRSxRQUFROztRQUV4RSxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7O1FBR3ZELEdBQUcsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUMvQixHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7O1FBR3RELEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNqQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNyRyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDbkQsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3BELEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzdFO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixHQUFHLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQztZQUN2QixHQUFHLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQztZQUMxQixHQUFHLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztZQUN6QixHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxjQUFjLElBQUksWUFBWSxFQUFFLFNBQVMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDaEc7UUFFRCxRQUFRLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQzs7Ozs7SUFHNUIsZ0JBQWdCLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLENBQUM7Q0FDdkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFRCxNQUFNLHdCQUF3QixLQUFhO0lBQ3pDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDcEYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdXR0b25Db25maWcsIEJ1dHRvblN0eWxlLCBJbWFnZVZpZXdlckNvbmZpZyB9IGZyb20gJy4vaW1hZ2V2aWV3ZXIuY29uZmlnJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJ1dHRvbiB7XHJcbiAgLy8jcmVnaW9uIFByb3BlcnRpZXNcclxuICBzb3J0SWQgPSAwO1xyXG5cclxuICBpY29uOiBzdHJpbmc7XHJcbiAgdG9vbHRpcDogc3RyaW5nO1xyXG5cclxuICAvLyBob3ZlciBzdGF0ZVxyXG4gIGhvdmVyOiBib29sZWFuIHwgKCgpID0+IGJvb2xlYW4pID0gZmFsc2U7XHJcblxyXG4gIC8vIHNob3cvaGlkZSBidXR0b25cclxuICBkaXNwbGF5ID0gdHJ1ZTtcclxuXHJcbiAgLy8gZHJhd24gb24gcG9zaXRpb25cclxuICBwcml2YXRlIGRyYXdQb3NpdGlvbiA9IG51bGw7XHJcbiAgcHJpdmF0ZSBkcmF3UmFkaXVzID0gMDtcclxuICAvLyNlbmRyZWdpb25cclxuXHJcbiAgLy8jcmVnaW9uIExpZmVjeWNsZSBldmVudHNcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGNvbmZpZzogQnV0dG9uQ29uZmlnLFxyXG4gICAgcHJpdmF0ZSBzdHlsZTogQnV0dG9uU3R5bGVcclxuICApIHtcclxuICAgIHRoaXMuc29ydElkID0gY29uZmlnLnNvcnRJZDtcclxuICAgIHRoaXMuZGlzcGxheSA9IGNvbmZpZy5zaG93O1xyXG4gICAgdGhpcy5pY29uID0gY29uZmlnLmljb247XHJcbiAgICB0aGlzLnRvb2x0aXAgPSBjb25maWcudG9vbHRpcDtcclxuICB9XHJcbiAgLy8jZW5kcmVnaW9uXHJcblxyXG4gIC8vI3JlZ2lvbiBFdmVudHNcclxuICAvLyBjbGljayBhY3Rpb25cclxuICBvbkNsaWNrKGV2dCkgeyBhbGVydCgnbm8gY2xpY2sgYWN0aW9uIHNldCEnKTsgcmV0dXJuIHRydWU7IH1cclxuXHJcbiAgLy8gbW91c2UgZG93biBhY3Rpb25cclxuICBvbk1vdXNlRG93bihldnQpIHsgcmV0dXJuIGZhbHNlOyB9XHJcbiAgLy8jZW5kcmVnaW9uXHJcblxyXG4gIC8vI3JlZ2lvbiBEcmF3IEJ1dHRvblxyXG4gIGRyYXcoY3R4LCB4LCB5LCByYWRpdXMpIHtcclxuICAgIHRoaXMuZHJhd1Bvc2l0aW9uID0geyB4OiB4LCB5OiB5IH07XHJcbiAgICB0aGlzLmRyYXdSYWRpdXMgPSByYWRpdXM7XHJcblxyXG4gICAgLy8gcHJlc2VydmUgY29udGV4dFxyXG4gICAgY3R4LnNhdmUoKTtcclxuXHJcbiAgICAvLyBkcmF3aW5nIHNldHRpbmdzXHJcbiAgICBjb25zdCBpc0hvdmVyID0gKHR5cGVvZiB0aGlzLmhvdmVyID09PSAnZnVuY3Rpb24nKSA/IHRoaXMuaG92ZXIoKSA6IHRoaXMuaG92ZXI7XHJcbiAgICBjdHguZ2xvYmFsQWxwaGEgPSAoaXNIb3ZlcikgPyB0aGlzLnN0eWxlLmhvdmVyQWxwaGEgOiB0aGlzLnN0eWxlLmFscGhhO1xyXG4gICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuc3R5bGUuYmdTdHlsZTtcclxuICAgIGN0eC5saW5lV2lkdGggPSAwO1xyXG5cclxuICAgIC8vIGRyYXcgY2lyY2xlXHJcbiAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICBjdHguYXJjKHgsIHksIHJhZGl1cywgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgY3R4LmZpbGwoKTtcclxuICAgIGlmICh0aGlzLnN0eWxlLmJvcmRlcldpZHRoID4gMCkge1xyXG4gICAgICBjdHgubGluZVdpZHRoID0gdGhpcy5zdHlsZS5ib3JkZXJXaWR0aDtcclxuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5zdHlsZS5ib3JkZXJTdHlsZTtcclxuICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGRyYXcgaWNvblxyXG4gICAgaWYgKHRoaXMuaWNvbiAhPT0gbnVsbCkge1xyXG4gICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAvLyBjdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ2Rlc3RpbmF0aW9uLW91dCc7XHJcbiAgICAgIHRoaXMuZHJhd0ljb25Gb250KGN0eCwgeCwgeSwgcmFkaXVzKTtcclxuICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyByZXN0b3JlIGNvbnRleHRcclxuICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGRyYXdJY29uRm9udChjdHgsIGNlbnRyZVgsIGNlbnRyZVksIHNpemUpIHtcclxuICAgIC8vIGZvbnQgc2V0dGluZ3NcclxuICAgIGN0eC5mb250ID0gc2l6ZSArICdweCAnICsgdGhpcy5zdHlsZS5pY29uRm9udEZhbWlseTtcclxuICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLnN0eWxlLmljb25TdHlsZTtcclxuXHJcbiAgICAvLyBjYWxjdWxhdGUgcG9zaXRpb25cclxuICAgIGNvbnN0IHRleHRTaXplID0gY3R4Lm1lYXN1cmVUZXh0KHRoaXMuaWNvbik7XHJcbiAgICBjb25zdCB4ID0gY2VudHJlWCAtIHRleHRTaXplLndpZHRoIC8gMjtcclxuICAgIGNvbnN0IHkgPSBjZW50cmVZICsgc2l6ZSAvIDI7XHJcblxyXG4gICAgLy8gZHJhdyBpdFxyXG4gICAgY3R4LmZpbGxUZXh0KHRoaXMuaWNvbiwgeCwgeSk7XHJcbiAgfVxyXG4gIC8vI2VuZHJlZ2lvblxyXG5cclxuICAvLyNyZWdpb24gVXRpbHNcclxuICBpc1dpdGhpbkJvdW5kcyh4LCB5KSB7XHJcbiAgICBpZiAodGhpcy5kcmF3UG9zaXRpb24gPT09IG51bGwpIHsgcmV0dXJuIGZhbHNlOyB9XHJcbiAgICBjb25zdCBkeCA9IE1hdGguYWJzKHRoaXMuZHJhd1Bvc2l0aW9uLnggLSB4KSwgZHkgPSBNYXRoLmFicyh0aGlzLmRyYXdQb3NpdGlvbi55IC0geSk7XHJcbiAgICByZXR1cm4gZHggKiBkeCArIGR5ICogZHkgPD0gdGhpcy5kcmF3UmFkaXVzICogdGhpcy5kcmF3UmFkaXVzO1xyXG4gIH1cclxuICAvLyNlbmRyZWdpb25cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFZpZXdwb3J0IHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyB3aWR0aDogbnVtYmVyLFxyXG4gICAgcHVibGljIGhlaWdodDogbnVtYmVyLFxyXG4gICAgcHVibGljIHNjYWxlOiBudW1iZXIsXHJcbiAgICBwdWJsaWMgcm90YXRpb246IG51bWJlcixcclxuICAgIHB1YmxpYyB4OiBudW1iZXIsXHJcbiAgICBwdWJsaWMgeTogbnVtYmVyXHJcbiAgKSB7fVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERpbWVuc2lvbiB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyOyB9XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUmVzb3VyY2VMb2FkZXIge1xyXG4gIHB1YmxpYyBzcmM6IHN0cmluZztcclxuICBwdWJsaWMgc291cmNlRGltOiB7IHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyIH07XHJcbiAgcHVibGljIHZpZXdwb3J0OiBWaWV3cG9ydCA9IHsgd2lkdGg6IDAsIGhlaWdodDogMCwgc2NhbGU6IDEsIHJvdGF0aW9uOiAwLCB4OiAwLCB5OiAwIH07XHJcbiAgcHVibGljIG1pblNjYWxlID0gMDtcclxuICBwdWJsaWMgbWF4U2NhbGUgPSA0O1xyXG4gIHB1YmxpYyBjdXJyZW50SXRlbSA9IDE7XHJcbiAgcHVibGljIHRvdGFsSXRlbSA9IDE7XHJcbiAgcHVibGljIHNob3dJdGVtc1F1YW50aXR5ID0gZmFsc2U7XHJcbiAgcHVibGljIGxvYWRlZCA9IGZhbHNlO1xyXG4gIHB1YmxpYyBsb2FkaW5nID0gZmFsc2U7XHJcbiAgcHVibGljIHJlbmRlcmluZyA9IGZhbHNlO1xyXG5cclxuICBwcm90ZWN0ZWQgX2ltYWdlO1xyXG4gIHByb3RlY3RlZCByZXNvdXJjZUNoYW5nZSA9IG5ldyBTdWJqZWN0PHN0cmluZz4oKTtcclxuXHJcbiAgYWJzdHJhY3Qgc2V0VXAoKTtcclxuICBhYnN0cmFjdCBsb2FkUmVzb3VyY2UoKTtcclxuXHJcbiAgcHVibGljIHJlc2V0Vmlld3BvcnQoY2FudmFzRGltOiBEaW1lbnNpb24pOiBib29sZWFuIHtcclxuICAgIGlmICghdGhpcy5sb2FkZWQgfHwgIWNhbnZhc0RpbSkgeyByZXR1cm47IH1cclxuXHJcbiAgICBjb25zdCByb3RhdGlvbiA9IHRoaXMudmlld3BvcnQgPyB0aGlzLnZpZXdwb3J0LnJvdGF0aW9uIDogMDtcclxuICAgIGNvbnN0IGludmVydGVkID0gdG9TcXVhcmVBbmdsZShyb3RhdGlvbikgLyA5MCAlIDIgIT09IDA7XHJcbiAgICBjb25zdCBjYW52YXMgPSB7XHJcbiAgICAgIHdpZHRoOiAhaW52ZXJ0ZWQgPyBjYW52YXNEaW0ud2lkdGggOiBjYW52YXNEaW0uaGVpZ2h0LFxyXG4gICAgICBoZWlnaHQ6ICFpbnZlcnRlZCA/IGNhbnZhc0RpbS5oZWlnaHQgOiBjYW52YXNEaW0ud2lkdGhcclxuICAgIH07XHJcblxyXG4gICAgaWYgKCgoY2FudmFzLmhlaWdodCAvIHRoaXMuX2ltYWdlLmhlaWdodCkgKiB0aGlzLl9pbWFnZS53aWR0aCkgPD0gY2FudmFzLndpZHRoKSB7XHJcbiAgICAgIHRoaXMudmlld3BvcnQuc2NhbGUgPSBjYW52YXMuaGVpZ2h0IC8gdGhpcy5faW1hZ2UuaGVpZ2h0O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy52aWV3cG9ydC5zY2FsZSA9IGNhbnZhcy53aWR0aCAvIHRoaXMuX2ltYWdlLndpZHRoO1xyXG4gICAgfVxyXG4gICAgdGhpcy5taW5TY2FsZSA9IHRoaXMudmlld3BvcnQuc2NhbGUgLyA0O1xyXG4gICAgdGhpcy5tYXhTY2FsZSA9IHRoaXMudmlld3BvcnQuc2NhbGUgKiA0O1xyXG5cclxuICAgIC8vIHN0YXJ0IHBvaW50IHRvIGRyYXcgaW1hZ2VcclxuICAgIHRoaXMudmlld3BvcnQud2lkdGggPSB0aGlzLl9pbWFnZS53aWR0aCAqIHRoaXMudmlld3BvcnQuc2NhbGU7XHJcbiAgICB0aGlzLnZpZXdwb3J0LmhlaWdodCA9IHRoaXMuX2ltYWdlLmhlaWdodCAqIHRoaXMudmlld3BvcnQuc2NhbGU7XHJcbiAgICB0aGlzLnZpZXdwb3J0LnggPSAoY2FudmFzRGltLndpZHRoIC0gdGhpcy52aWV3cG9ydC53aWR0aCkgLyAyO1xyXG4gICAgdGhpcy52aWV3cG9ydC55ID0gKGNhbnZhc0RpbS5oZWlnaHQgLSB0aGlzLnZpZXdwb3J0LmhlaWdodCkgLyAyO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRyYXcoY3R4LCBjb25maWc6IEltYWdlVmlld2VyQ29uZmlnLCBjYW52YXNEaW06IERpbWVuc2lvbiwgb25GaW5pc2gpIHtcclxuICAgIC8vIGNsZWFyIGNhbnZhc1xyXG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXNEaW0ud2lkdGgsIGNhbnZhc0RpbS5oZWlnaHQpO1xyXG5cclxuICAgIC8vIERyYXcgYmFja2dyb3VuZCBjb2xvcjtcclxuICAgIGN0eC5maWxsU3R5bGUgPSBjb25maWcuYmdTdHlsZTtcclxuICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXNEaW0ud2lkdGgsIGNhbnZhc0RpbS5oZWlnaHQpO1xyXG5cclxuICAgIC8vIGRyYXcgaW1hZ2UgKHRyYW5zZm9ybWVkLCByb3RhdGUgYW5kIHNjYWxlZClcclxuICAgIGlmICghdGhpcy5sb2FkaW5nICYmIHRoaXMubG9hZGVkKSB7XHJcbiAgICAgIGN0eC50cmFuc2xhdGUodGhpcy52aWV3cG9ydC54ICsgdGhpcy52aWV3cG9ydC53aWR0aCAvIDIsIHRoaXMudmlld3BvcnQueSArIHRoaXMudmlld3BvcnQuaGVpZ2h0IC8gMik7XHJcbiAgICAgIGN0eC5yb3RhdGUodGhpcy52aWV3cG9ydC5yb3RhdGlvbiAqIE1hdGguUEkgLyAxODApO1xyXG4gICAgICBjdHguc2NhbGUodGhpcy52aWV3cG9ydC5zY2FsZSwgdGhpcy52aWV3cG9ydC5zY2FsZSk7XHJcbiAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5faW1hZ2UsIC10aGlzLl9pbWFnZS53aWR0aCAvIDIsIC10aGlzLl9pbWFnZS5oZWlnaHQgLyAyKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSAnIzMzMyc7XHJcbiAgICAgIGN0eC5mb250ID0gJzI1cHggVmVyZGFuYSc7XHJcbiAgICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcclxuICAgICAgY3R4LmZpbGxUZXh0KGNvbmZpZy5sb2FkaW5nTWVzc2FnZSB8fCAnTG9hZGluZy4uLicsIGNhbnZhc0RpbS53aWR0aCAvIDIsIGNhbnZhc0RpbS5oZWlnaHQgLyAyKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkZpbmlzaChjdHgsIGNvbmZpZywgY2FudmFzRGltKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvblJlc291cmNlQ2hhbmdlKCkgeyByZXR1cm4gdGhpcy5yZXNvdXJjZUNoYW5nZS5hc09ic2VydmFibGUoKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG9TcXVhcmVBbmdsZShhbmdsZTogbnVtYmVyKSB7XHJcbiAgcmV0dXJuIDkwICogKChNYXRoLnRydW5jKGFuZ2xlIC8gOTApICsgKE1hdGgudHJ1bmMoYW5nbGUgJSA5MCkgPiA0NSA/IDEgOiAwKSkgJSA0KTtcclxufVxyXG4iXX0=