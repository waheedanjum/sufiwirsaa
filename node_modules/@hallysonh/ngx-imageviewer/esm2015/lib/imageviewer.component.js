/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, ViewChild, Renderer2, Inject } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { ImageViewerConfig, IMAGEVIEWER_CONFIG, IMAGEVIEWER_CONFIG_DEFAULT } from './imageviewer.config';
import { Button, toSquareAngle } from './imageviewer.model';
import { ImageResourceLoader } from './image.loader';
import { ImageCacheService } from './imagecache.service';
import { PdfResourceLoader } from './pdf.loader';
const /** @type {?} */ MIN_TOOLTIP_WIDTH_SPACE = 500;
export class ImageViewerComponent {
    /**
     * @param {?} _sanitizer
     * @param {?} _renderer
     * @param {?} _imageCache
     * @param {?} config
     */
    constructor(_sanitizer, _renderer, _imageCache, config) {
        this._sanitizer = _sanitizer;
        this._renderer = _renderer;
        this._imageCache = _imageCache;
        this.config = config;
        this._dirty = true;
        this._buttons = [];
        this._currentTooltip = null;
        this._touchStartState = {};
        this._listenDestroyList = [];
        this.config = this.extendsDefaultConfig(config);
        this._nextPageButton = new Button(this.config.nextPageButton, this.config.buttonStyle);
        this._beforePageButton = new Button(this.config.beforePageButton, this.config.buttonStyle);
        this._zoomOutButton = new Button(this.config.zoomOutButton, this.config.buttonStyle);
        this._zoomInButton = new Button(this.config.zoomInButton, this.config.buttonStyle);
        this._rotateLeftButton = new Button(this.config.rotateLeftButton, this.config.buttonStyle);
        this._rotateRightButton = new Button(this.config.rotateRightButton, this.config.buttonStyle);
        this._resetButton = new Button(this.config.resetButton, this.config.buttonStyle);
        this._buttons = [
            this._zoomOutButton,
            this._zoomInButton,
            this._rotateLeftButton,
            this._rotateRightButton,
            this._resetButton
        ].filter(item => item.display)
            .sort((a, b) => a.sortId - b.sortId);
    }
    /**
     * @return {?}
     */
    get src() { return this._src; }
    /**
     * @param {?} value
     * @return {?}
     */
    set src(value) {
        if (value === this._src) {
            return;
        }
        this._src = value;
        this.setUpResource();
    }
    /**
     * @return {?}
     */
    get filetype() { return this._filetype; }
    /**
     * @param {?} value
     * @return {?}
     */
    set filetype(value) {
        if (value === this._filetype) {
            return;
        }
        this._filetype = value;
        this.setUpResource();
    }
    /**
     * @return {?}
     */
    get width() { return this._width; }
    /**
     * @param {?} value
     * @return {?}
     */
    set width(value) {
        if (value === this._width) {
            return;
        }
        this._width = value;
        if (this._canvas) {
            this._canvas.width = this._width;
        }
        this.resetImage();
    }
    /**
     * @return {?}
     */
    get height() { return this._height; }
    /**
     * @param {?} value
     * @return {?}
     */
    set height(value) {
        if (value === this._height) {
            return;
        }
        this._height = value;
        if (this._canvas) {
            this._canvas.height = this._height;
        }
        this.resetImage();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._canvas = this.canvasRef.nativeElement;
        this._context = this._canvas.getContext('2d');
        // setting canvas dimention
        this._canvas.width = this.width || this.config.width;
        this._canvas.height = this.height || this.config.height;
        // setting buttons actions
        this._nextPageButton.onClick = (evt) => { this.nextPage(); return false; };
        this._beforePageButton.onClick = (evt) => { this.previousPage(); return false; };
        this._zoomOutButton.onClick = (evt) => { this.zoomOut(); return false; };
        this._zoomInButton.onClick = (evt) => { this.zoomIn(); return false; };
        this._rotateLeftButton.onClick = (evt) => { this.rotateLeft(); return false; };
        this._rotateRightButton.onClick = (evt) => { this.rotateRight(); return false; };
        this._resetButton.onClick = (evt) => { this.resetImage(); return false; };
        // register event listeners
        this.addEventListeners();
        this.updateCanvas();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // unregiste event listeners
        this._listenDestroyList.forEach(listenDestroy => {
            if (typeof listenDestroy === 'function') {
                listenDestroy();
            }
        });
        this._imageCache.disposeCache();
    }
    /**
     * @return {?}
     */
    setUpResource() {
        if (this.isImage(this.src) && (!this._resource || !(this._resource instanceof ImageResourceLoader))) {
            if (this._resourceChangeSub) {
                this._resourceChangeSub.unsubscribe();
            }
            if (!this._imageResource) {
                this._imageResource = new ImageResourceLoader();
            }
            this._resource = this._imageResource;
        }
        else if (this.isPdf(this.src) && (!this._resource || !(this._resource instanceof PdfResourceLoader))) {
            if (this._resourceChangeSub) {
                this._resourceChangeSub.unsubscribe();
            }
            if (!this._pdfResource) {
                this._pdfResource = new PdfResourceLoader(this._imageCache);
            }
            this._resource = this._pdfResource;
        }
        if (this._resource) {
            this._resource.src = this.src instanceof File ? URL.createObjectURL(this.src) : this.src;
            this._resourceChangeSub = this._resource.onResourceChange().subscribe(() => {
                this.updateCanvas();
                if (this.src instanceof File) {
                    URL.revokeObjectURL(this._resource.src);
                }
            });
            this._resource.setUp();
            this.resetImage();
            if (this._context) {
                this.updateCanvas();
            }
        }
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onTap(evt) {
        const /** @type {?} */ activeElement = this.getUIElement(this.screenToCanvasCentre(evt.center));
        if (activeElement !== null) {
            activeElement.onClick(evt);
        }
    }
    /**
     * @return {?}
     */
    onTouchEnd() {
        this._touchStartState.viewport = undefined;
        this._touchStartState.scale = undefined;
        this._touchStartState.rotate = undefined;
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    processTouchEvent(evt) {
        // process pan
        if (!this._touchStartState.viewport) {
            this._touchStartState.viewport = Object.assign({}, this._resource.viewport);
        }
        const /** @type {?} */ viewport = this._resource.viewport;
        viewport.x = this._touchStartState.viewport.x + evt.deltaX;
        viewport.y = this._touchStartState.viewport.y + evt.deltaY;
        // process pinch in/out
        if (!this._touchStartState.scale) {
            this._touchStartState.scale = this._resource.viewport.scale;
        }
        const /** @type {?} */ newScale = this._touchStartState.scale * evt.scale;
        viewport.scale = newScale > this._resource.maxScale ? this._resource.maxScale :
            newScale < this._resource.minScale ? this._resource.minScale : newScale;
        // process rotate left/right
        if (!this._touchStartState.rotate) {
            this._touchStartState.rotate = { rotation: viewport.rotation, startRotate: evt.rotation };
        }
        if (evt.rotation !== 0) {
            const /** @type {?} */ newAngle = this._touchStartState.rotate.rotation + evt.rotation - this._touchStartState.rotate.startRotate;
            viewport.rotation = this.config.rotateStepper ? toSquareAngle(newAngle) : newAngle;
        }
        this._dirty = true;
    }
    /**
     * @return {?}
     */
    addEventListeners() {
        // zooming
        this._listenDestroyList.push(this._renderer.listen(this._canvas, 'DOMMouseScroll', (evt) => this.onMouseWheel(evt)));
        this._listenDestroyList.push(this._renderer.listen(this._canvas, 'mousewheel', (evt) => this.onMouseWheel(evt)));
        // show tooltip when mouseover it
        this._listenDestroyList.push(this._renderer.listen(this._canvas, 'mousemove', (evt) => this.checkTooltipActivation(this.screenToCanvasCentre({ x: evt.clientX, y: evt.clientY }))));
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onMouseWheel(evt) {
        if (!evt) {
            evt = event;
        }
        evt.preventDefault();
        if (evt.detail < 0 || evt.wheelDelta > 0) {
            // up -> larger
            this.zoomIn();
        }
        else {
            // down -> smaller
            this.zoomOut();
        }
    }
    /**
     * @param {?} pos
     * @return {?}
     */
    checkTooltipActivation(pos) {
        this.getUIElements().forEach(x => x.hover = false);
        const /** @type {?} */ activeElement = this.getUIElement(pos);
        const /** @type {?} */ oldToolTip = this._currentTooltip;
        if (activeElement !== null) {
            if (typeof activeElement.hover !== 'undefined') {
                activeElement.hover = true;
            }
            if (typeof activeElement.tooltip !== 'undefined') {
                this._currentTooltip = activeElement.tooltip;
            }
        }
        if (oldToolTip !== this._currentTooltip) {
            this._dirty = true;
        }
    }
    /**
     * @return {?}
     */
    nextPage() {
        if (!this._resource) {
            return;
        }
        if (this._resource.currentItem >= this._resource.totalItem) {
            return;
        }
        if (this._resource.currentItem < 1) {
            this._resource.currentItem = 0;
        }
        this._resource.currentItem++;
        this._resource.loadResource();
        this._dirty = true;
    }
    /**
     * @return {?}
     */
    previousPage() {
        if (!this._resource) {
            return;
        }
        if (this._resource.currentItem <= 1) {
            return;
        }
        if (this._resource.currentItem > this._resource.totalItem) {
            this._resource.currentItem = this._resource.totalItem + 1;
        }
        this._resource.currentItem--;
        this._resource.loadResource();
        this._dirty = true;
    }
    /**
     * @return {?}
     */
    zoomIn() {
        if (!this._resource) {
            return;
        }
        const /** @type {?} */ newScale = this._resource.viewport.scale * (1 + this.config.scaleStep);
        this._resource.viewport.scale = newScale > this._resource.maxScale ? this._resource.maxScale : newScale;
        this._dirty = true;
    }
    /**
     * @return {?}
     */
    zoomOut() {
        if (!this._resource) {
            return;
        }
        const /** @type {?} */ newScale = this._resource.viewport.scale * (1 - this.config.scaleStep);
        this._resource.viewport.scale = newScale < this._resource.minScale ? this._resource.minScale : newScale;
        this._dirty = true;
    }
    /**
     * @return {?}
     */
    rotateLeft() {
        if (!this._resource) {
            return;
        }
        const /** @type {?} */ viewport = this._resource.viewport;
        viewport.rotation = viewport.rotation === 0 ? 270 : viewport.rotation - 90;
        this._dirty = true;
    }
    /**
     * @return {?}
     */
    rotateRight() {
        if (!this._resource) {
            return;
        }
        const /** @type {?} */ viewport = this._resource.viewport;
        viewport.rotation = viewport.rotation === 270 ? 0 : viewport.rotation + 90;
        this._dirty = true;
    }
    /**
     * @return {?}
     */
    resetImage() {
        if (!this._resource) {
            return;
        }
        this._resource.resetViewport(this._canvas);
        this._dirty = true;
    }
    /**
     * @return {?}
     */
    updateCanvas() {
        this.resetImage();
        // start new render loop
        this.render();
    }
    /**
     * @return {?}
     */
    render() {
        const /** @type {?} */ vm = this;
        // only re-render if dirty
        if (this._dirty && this._resource) {
            this._dirty = false;
            const /** @type {?} */ ctx = this._context;
            ctx.save();
            this._resource.draw(ctx, this.config, this._canvas, () => {
                ctx.restore();
                if (vm._resource.loaded) {
                    // draw buttons
                    this.drawButtons(ctx);
                    // draw paginator
                    if (this._resource.showItemsQuantity) {
                        this.drawPaginator(ctx);
                    }
                }
            });
        }
        requestAnimationFrame(() => this.render());
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    drawButtons(ctx) {
        const /** @type {?} */ padding = this.config.tooltips.padding;
        const /** @type {?} */ radius = this.config.tooltips.radius;
        const /** @type {?} */ gap = 2 * radius + padding;
        const /** @type {?} */ x = this._canvas.width - radius - padding;
        const /** @type {?} */ y = this._canvas.height - radius - padding;
        // draw buttons
        for (let /** @type {?} */ i = 0; i < this._buttons.length; i++) {
            this._buttons[i].draw(ctx, x, y - gap * i, radius);
        }
        // draw tooltip
        if (this._currentTooltip !== null && this._canvas.width > MIN_TOOLTIP_WIDTH_SPACE) {
            ctx.save();
            const /** @type {?} */ fontSize = radius;
            ctx.font = fontSize + 'px sans-serif';
            // calculate position
            const /** @type {?} */ textSize = ctx.measureText(this._currentTooltip).width, /** @type {?} */ rectWidth = textSize + padding, /** @type {?} */ rectHeight = fontSize * 0.70 + padding, /** @type {?} */ rectX = this._canvas.width
                - (2 * radius + 2 * padding) // buttons
                - rectWidth, /** @type {?} */ rectY = this._canvas.height - rectHeight - padding, /** @type {?} */ textX = rectX + 0.5 * padding, /** @type {?} */ textY = this._canvas.height - 1.5 * padding;
            ctx.globalAlpha = this.config.tooltips.bgAlpha;
            ctx.fillStyle = this.config.tooltips.bgStyle;
            this.drawRoundRectangle(ctx, rectX, rectY, rectWidth, rectHeight, 8, true, false);
            ctx.globalAlpha = this.config.tooltips.textAlpha;
            ctx.fillStyle = this.config.tooltips.textStyle;
            ctx.fillText(this._currentTooltip, textX, textY);
            ctx.restore();
        }
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    drawPaginator(ctx) {
        const /** @type {?} */ padding = this.config.tooltips.padding;
        const /** @type {?} */ radius = this.config.tooltips.radius;
        const /** @type {?} */ labelWidth = 50;
        const /** @type {?} */ x1 = (this._canvas.width - labelWidth) / 2 - radius - padding; // PrevPageButton
        const /** @type {?} */ x2 = this._canvas.width / 2; // Label
        const /** @type {?} */ x3 = (this._canvas.width + labelWidth) / 2 + radius + padding; // NextPageButton
        const /** @type {?} */ y = this._canvas.height - radius - padding;
        const /** @type {?} */ label = this._resource.currentItem + '/' + this._resource.totalItem;
        const /** @type {?} */ fontSize = 25;
        ctx.save();
        this._beforePageButton.draw(ctx, x1, y, radius);
        this._nextPageButton.draw(ctx, x3, y, radius);
        ctx.restore();
        ctx.save();
        ctx.font = fontSize + 'px Verdana';
        ctx.textAlign = 'center';
        ctx.fillText(label, x2, this._canvas.height - padding - fontSize / 2, labelWidth);
        ctx.restore();
    }
    /**
     * @param {?} ctx
     * @param {?} x
     * @param {?} y
     * @param {?} width
     * @param {?} height
     * @param {?} radius
     * @param {?} fill
     * @param {?} stroke
     * @return {?}
     */
    drawRoundRectangle(ctx, x, y, width, height, radius, fill, stroke) {
        radius = (typeof radius === 'number') ? radius : 5;
        fill = (typeof fill === 'boolean') ? fill : true; // fill = default
        stroke = (typeof stroke === 'boolean') ? stroke : false;
        // draw round rectangle
        ctx.beginPath();
        ctx.moveTo(x + radius, y);
        ctx.lineTo(x + width - radius, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
        ctx.lineTo(x + width, y + height - radius);
        ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
        ctx.lineTo(x + radius, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
        ctx.lineTo(x, y + radius);
        ctx.quadraticCurveTo(x, y, x + radius, y);
        ctx.closePath();
        if (fill) {
            ctx.fill();
        }
        if (stroke) {
            ctx.stroke();
        }
    }
    /**
     * @param {?} cfg
     * @return {?}
     */
    extendsDefaultConfig(cfg) {
        const /** @type {?} */ defaultCfg = IMAGEVIEWER_CONFIG_DEFAULT;
        const /** @type {?} */ localCfg = Object.assign({}, defaultCfg, cfg);
        if (cfg.buttonStyle) {
            localCfg.buttonStyle = Object.assign(defaultCfg.buttonStyle, cfg.buttonStyle);
        }
        if (cfg.tooltips) {
            localCfg.tooltips = Object.assign(defaultCfg.tooltips, cfg.tooltips);
        }
        if (cfg.nextPageButton) {
            localCfg.nextPageButton = Object.assign(defaultCfg.nextPageButton, cfg.nextPageButton);
        }
        if (cfg.beforePageButton) {
            localCfg.beforePageButton = Object.assign(defaultCfg.beforePageButton, cfg.beforePageButton);
        }
        if (cfg.zoomOutButton) {
            localCfg.zoomOutButton = Object.assign(defaultCfg.zoomOutButton, cfg.zoomOutButton);
        }
        if (cfg.zoomOutButton) {
            localCfg.zoomOutButton = Object.assign(defaultCfg.zoomOutButton, cfg.zoomOutButton);
        }
        if (cfg.zoomInButton) {
            localCfg.zoomInButton = Object.assign(defaultCfg.zoomInButton, cfg.zoomInButton);
        }
        if (cfg.rotateLeftButton) {
            localCfg.rotateLeftButton = Object.assign(defaultCfg.rotateLeftButton, cfg.rotateLeftButton);
        }
        if (cfg.rotateRightButton) {
            localCfg.rotateRightButton = Object.assign(defaultCfg.rotateRightButton, cfg.rotateRightButton);
        }
        if (cfg.resetButton) {
            localCfg.resetButton = Object.assign(defaultCfg.resetButton, cfg.resetButton);
        }
        return localCfg;
    }
    /**
     * @param {?} pos
     * @return {?}
     */
    screenToCanvasCentre(pos) {
        const /** @type {?} */ rect = this._canvas.getBoundingClientRect();
        return { x: pos.x - rect.left, y: pos.y - rect.top };
    }
    /**
     * @return {?}
     */
    getUIElements() {
        const /** @type {?} */ hoverElements = this._buttons.slice();
        hoverElements.push(this._nextPageButton);
        hoverElements.push(this._beforePageButton);
        return hoverElements;
    }
    /**
     * @param {?} pos
     * @return {?}
     */
    getUIElement(pos) {
        const /** @type {?} */ activeUIElement = this.getUIElements().filter((uiElement) => {
            return uiElement.isWithinBounds(pos.x, pos.y);
        });
        return (activeUIElement.length > 0) ? activeUIElement[0] : null;
    }
    /**
     * @param {?} file
     * @return {?}
     */
    isImage(file) {
        if (this._filetype && this._filetype.toLowerCase() === 'image') {
            return true;
        }
        return testFile(file, '\\.(png|jpg|jpeg|gif)|image/png');
    }
    /**
     * @param {?} file
     * @return {?}
     */
    isPdf(file) {
        if (this._filetype && this._filetype.toLowerCase() === 'pdf') {
            return true;
        }
        return testFile(file, '\\.(pdf)|application/pdf');
    }
}
ImageViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-imageviewer',
                template: `
    <canvas #imageContainer [width]="width" [height]="height"
      (tap)="onTap($event)" (pinchin)="processTouchEvent($event)" (pinchout)="processTouchEvent($event)"
      (panmove)="processTouchEvent($event)" (panend)="onTouchEnd()" (rotatemove)="processTouchEvent($event)"
        (rotateend)="onTouchEnd()">
    </canvas>
  `,
                styles: [`
    :host { display: block }
    :host canvas { margin: 0 auto; display: block }
    [hidden] { display: none !important }
  `]
            },] },
];
//#endregion
/** @nocollapse */
ImageViewerComponent.ctorParameters = () => [
    { type: DomSanitizer, },
    { type: Renderer2, },
    { type: ImageCacheService, },
    { type: ImageViewerConfig, decorators: [{ type: Inject, args: [IMAGEVIEWER_CONFIG,] },] },
];
ImageViewerComponent.propDecorators = {
    "src": [{ type: Input, args: ['src',] },],
    "filetype": [{ type: Input, args: ['filetype',] },],
    "width": [{ type: Input, args: ['width',] },],
    "height": [{ type: Input, args: ['height',] },],
    "canvasRef": [{ type: ViewChild, args: ['imageContainer',] },],
};
function ImageViewerComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    ImageViewerComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    ImageViewerComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    ImageViewerComponent.propDecorators;
    /** @type {?} */
    ImageViewerComponent.prototype._src;
    /** @type {?} */
    ImageViewerComponent.prototype._filetype;
    /** @type {?} */
    ImageViewerComponent.prototype._width;
    /** @type {?} */
    ImageViewerComponent.prototype._height;
    /** @type {?} */
    ImageViewerComponent.prototype.canvasRef;
    /** @type {?} */
    ImageViewerComponent.prototype._canvas;
    /** @type {?} */
    ImageViewerComponent.prototype._context;
    /** @type {?} */
    ImageViewerComponent.prototype._dirty;
    /** @type {?} */
    ImageViewerComponent.prototype._nextPageButton;
    /** @type {?} */
    ImageViewerComponent.prototype._beforePageButton;
    /** @type {?} */
    ImageViewerComponent.prototype._zoomOutButton;
    /** @type {?} */
    ImageViewerComponent.prototype._zoomInButton;
    /** @type {?} */
    ImageViewerComponent.prototype._rotateLeftButton;
    /** @type {?} */
    ImageViewerComponent.prototype._rotateRightButton;
    /** @type {?} */
    ImageViewerComponent.prototype._resetButton;
    /** @type {?} */
    ImageViewerComponent.prototype._buttons;
    /** @type {?} */
    ImageViewerComponent.prototype._currentTooltip;
    /** @type {?} */
    ImageViewerComponent.prototype._touchStartState;
    /** @type {?} */
    ImageViewerComponent.prototype._listenDestroyList;
    /** @type {?} */
    ImageViewerComponent.prototype._resource;
    /** @type {?} */
    ImageViewerComponent.prototype._resourceChangeSub;
    /** @type {?} */
    ImageViewerComponent.prototype._imageResource;
    /** @type {?} */
    ImageViewerComponent.prototype._pdfResource;
    /** @type {?} */
    ImageViewerComponent.prototype._sanitizer;
    /** @type {?} */
    ImageViewerComponent.prototype._renderer;
    /** @type {?} */
    ImageViewerComponent.prototype._imageCache;
    /** @type {?} */
    ImageViewerComponent.prototype.config;
}
/**
 * @param {?} file
 * @param {?} regexTest
 * @return {?}
 */
function testFile(file, regexTest) {
    if (!file) {
        return false;
    }
    const /** @type {?} */ name = file instanceof File ? file.name : file;
    return name.toLowerCase().match(regexTest) !== null;
}

//# sourceMappingURL=data:application/json;base64,